# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 環境変数の設定
env:
  DOCKER_BUILDKIT: 1
  RESISTRY_URL: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: test-qgis
  DOCKER_FILE: ./docker/Dockerfile
  RELEASE_VERSION: latest
  TEST_LOG_ARCHIVE: test_logs-${{ github.run_number }}
  DISPLAY: :99

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Dockerのversion確認
      - name: Print Docker Version
        run: |
          docker version

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      
      # burger-war-kitイメージのビルド
      - name: Build Docker Image
        run: |
          docker build --no-cache --file ${{ env.DOCKER_FILE }} --tag ${{ env.IMAGE_NAME }} .

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      # ghcr.ioにログイン
      - name: Login to ghrc.io
        if: steps.image-test.outputs.test_result == 0
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # burger-war-kitrイメージをテストバージョンとしてプッシュ
      - name: Push Docker Image
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ env.RESISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          docker push ${{ env.RESISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          echo "${{ env.RELEASE_VERSION }}" > RELEASE_VERSION
